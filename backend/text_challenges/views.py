# from django.shortcuts import render
# from rest_framework import viewsets
# from rest_framework.decorators import api_view
# from rest_framework.response import Response
# from rest_framework.views import APIView
# from django.db.models import Q
# from .models import Language, TextChallenge
# from .serializers import LanguageSerializer, TextChallengeSerializer
# import random

# # Create your views here.

# class LanguageViewSet(viewsets.ReadOnlyModelViewSet):
#     queryset = Language.objects.filter(is_active=True)
#     serializer_class = LanguageSerializer

# class TextChallengeViewSet(viewsets.ReadOnlyModelViewSet):
#     serializer_class = TextChallengeSerializer
    
#     def get_queryset(self):
#         queryset = TextChallenge.objects.all()
        
#         difficulty = self.request.query_params.get('difficulty')
#         if difficulty:
#             queryset = queryset.filter(difficulty_level=difficulty.upper())
            
#         language = self.request.query_params.get('language')
#         if language:
#             queryset = queryset.filter(language__language_code=language)
            
#         return queryset

# class LanguageSummaryView(APIView):
#     def get(self, request):
#         languages = Language.objects.filter(is_active=True)
        
#         result = []
        
#         for lang in languages:
#             challenges = TextChallenge.objects.filter(language=lang)
            
#             levels = list(challenges.values_list('difficulty_level', flat=True).distinct())
#             formatted_levels = [level.capitalize() for level in levels]
            
#             minutes_by_level = {}
#             for level in levels:
#                 challenges_by_level = challenges.filter(difficulty_level=level)
#                 if challenges_by_level.exists():
#                     level_name = level.capitalize()
#                     unique_minutes = sorted(list(set(challenges_by_level.values_list('recommended_time', flat=True))))
#                     minutes_by_level[level_name] = unique_minutes
            
#             lang_summary = {
#                 "lang_name": lang.language_name,
#                 "lang_code": lang.language_code,
#                 "levels": formatted_levels,
#                 "minutes": minutes_by_level
#             }
            
#             result.append(lang_summary)
        
#         return Response(result)

# @api_view(['GET'])
# def get_random_challenge(request):
#     lang_code = request.query_params.get('lang_code')
#     level = request.query_params.get('level')
#     minutes = request.query_params.get('minutes')
    
#     if not lang_code or not level:
#         return Response(
#             {"error": "lang_code and level are required parameters"},
#             status=400
#         )
    
#     query = Q(language__language_code=lang_code)
#     query &= Q(difficulty_level=level.upper())
    
#     if minutes:
#         try:
#             minutes = int(minutes)
#             query &= Q(recommended_time=minutes)
#         except ValueError:
#             return Response(
#                 {"error": "minutes must be a number"},
#                 status=400
#             )
    
#     challenges = list(TextChallenge.objects.filter(query))
    
#     if not challenges:
#         return Response(
#             {"error": f"No challenges found for language '{lang_code}' with level '{level}'{f' and {minutes} minutes' if minutes else ''}"},
#             status=404
#         )
    
#     challenge = random.choice(challenges)
    
#     serializer = TextChallengeSerializer(challenge)
#     return Response(serializer.data)


from django.shortcuts import render
from rest_framework import viewsets, permissions
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework.views import APIView
from django.db.models import Q
from .models import Language, TextChallenge, ChallengeAttempt
from .serializers import LanguageSerializer, TextChallengeSerializer, ChallengeAttemptSerializer
import random

# üëá –û–¥–æ–æ –±“Ø—Ö CRUD “Ø–π–ª–¥–ª–∏–π–≥ –¥—ç–º–∂–∏–Ω—ç (GET, POST, PUT, DELETE)
class LanguageViewSet(viewsets.ModelViewSet):
    queryset = Language.objects.filter(is_active=True)     # –ó”©–≤—Ö”©–Ω –∏–¥—ç–≤—Ö—Ç—ç–π —Ö—ç–ª–Ω“Ø“Ø–¥–∏–π–≥ —Ö–∞—Ä—É—É–ª–Ω–∞
    serializer_class = LanguageSerializer      # –•–∞—Ä–∏—É ”©–≥”©–≥–¥–ª–∏–π–≥ —Å–µ—Ä–∏–∞–ª–∏–∑–∞–¥ —Ö–∏–π—Ö—ç–¥ —ç–Ω—ç —Å–µ—Ä–∏–∞–ª–∏–∑–µ—Ä—ã–≥ –∞—à–∏–≥–ª–∞–Ω–∞

class TextChallengeViewSet(viewsets.ModelViewSet):
    serializer_class = TextChallengeSerializer

    def get_queryset(self):
        queryset = TextChallenge.objects.all()         # –ë“Ø—Ö —Å–æ—Ä–∏–ª—É—É–¥—ã–≥ —ç—Ö–ª—ç—ç–¥ –∞–≤–Ω–∞
        difficulty = self.request.query_params.get('difficulty')         # –•—ç—Ä—ç–≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä—Ç level –±–∞–π–≤–∞–ª —à“Ø“Ø–Ω—ç
        if difficulty:
            queryset = queryset.filter(difficulty_level=difficulty.upper())
        language = self.request.query_params.get('language')          # –•—ç—Ä—ç–≤ query –ø–∞—Ä–∞–º–µ—Ç—Ä—Ç language –±–∞–π–≤–∞–ª —à“Ø“Ø–Ω—ç
        if language:
            queryset = queryset.filter(language__language_code=language)
        return queryset

# –•—ç–ª –±“Ø—Ä –¥—ç—ç—Ä —Ö—ç–¥—ç–Ω —Å–æ—Ä–∏–ª, —è–º–∞—Ä —Ç“Ø–≤—à–∏–Ω, —è–º–∞—Ä —Ö—É–≥–∞—Ü–∞–∞—Ç–∞–π —Å–æ—Ä–∏–ª –±–∞–π–≥–∞–∞–≥ —Ö–∞—Ä—É—É–ª–Ω–∞
class LanguageSummaryView(APIView):
    def get(self, request):
        languages = Language.objects.filter(is_active=True)         # –ò–¥—ç–≤—Ö—Ç—ç–π –±“Ø—Ö —Ö—ç–ª–Ω“Ø“Ø–¥–∏–π–≥ –∞–≤–Ω–∞
        result = []

        for lang in languages:
            challenges = TextChallenge.objects.filter(language=lang)
            levels = list(challenges.values_list('difficulty_level', flat=True).distinct())    # –Ø–º–∞—Ä difficulty —Ç“Ø–≤—à–∏–Ω –±–∞–π–≥–∞–∞ –±–æ–ª–æ—Ö—ã–≥ –æ–ª–Ω–æ (–¥–∞–≤—Ç–∞–≥–¥–∞–∞–≥“Ø–π)
            formatted_levels = [level.capitalize() for level in levels]
            minutes_by_level = {}             # –¢“Ø–≤—à–∏–Ω –±“Ø—Ä—ç—ç—Ä —Ö—ç–¥—ç–Ω –º–∏–Ω—É—Ç—ã–Ω —Å–æ—Ä–∏–ª—É—É–¥ –±–∞–π–≥–∞–∞–≥ —è–ª–≥–∞–∂ —Ö–∞–¥–≥–∞–ª–Ω–∞
            for level in levels:
                challenges_by_level = challenges.filter(difficulty_level=level)
                if challenges_by_level.exists():
                    level_name = level.capitalize()
                    unique_minutes = sorted(list(set(challenges_by_level.values_list('recommended_time', flat=True))))
                    minutes_by_level[level_name] = unique_minutes

            lang_summary = {
                "lang_name": lang.language_name,
                "lang_code": lang.language_code,
                "levels": formatted_levels,
                "minutes": minutes_by_level
            }
            result.append(lang_summary)

        return Response(result)

# –°–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π –¥–∞–∞–ª–≥–∞–≤–∞—Ä –±—É—Ü–∞–∞—Ö API
@api_view(['GET'])
def get_random_challenge(request):
    lang_code = request.query_params.get('lang_code')
    level = request.query_params.get('level')
    minutes = request.query_params.get('minutes')

    if not lang_code or not level:
        return Response(
            {"error": "lang_code and level are required parameters"},
            status=400
        )

    query = Q(language__language_code=lang_code)
    query &= Q(difficulty_level=level.upper())

    if minutes:
        try:
            minutes = int(minutes)
            query &= Q(recommended_time=minutes)
        except ValueError:
            return Response(
                {"error": "minutes must be a number"},
                status=400
            )

    challenges = list(TextChallenge.objects.filter(query))

    if not challenges:
        return Response(
            {"error": f"No challenges found for language '{lang_code}' with level '{level}'{f' and {minutes} minutes' if minutes else ''}"},
            status=404
        )

    challenge = random.choice(challenges)     # –û–ª–¥—Å–æ–Ω —Å–æ—Ä–∏–ª—É—É–¥–∞–∞—Å –Ω—ç–≥–∏–π–≥ —Å–∞–Ω–∞–º—Å–∞—Ä–≥“Ø–π —Å–æ–Ω–≥–æ–Ω–æ
    serializer = TextChallengeSerializer(challenge)     # –°–µ—Ä–∏–∞–ª–∏–∑–∞–¥ —Ö–∏–π–≥—ç—ç–¥ –±—É—Ü–∞–∞–Ω–∞
    return Response(serializer.data)


# –•—ç—Ä—ç–≥–ª—ç–≥—á —Å–æ—Ä–∏–ª–¥ –æ—Ä–æ–ª—Ü—Å–æ–Ω —Ç“Ø“Ø—Ö–∏–π–≥ CRUD —Ö—ç–ª–±—ç—Ä—ç—ç—Ä —É–¥–∏—Ä–¥–∞–Ω–∞
class ChallengeAttemptViewSet(viewsets.ModelViewSet):
    serializer_class = ChallengeAttemptSerializer
    permission_classes = [permissions.IsAuthenticated]     # –ù—ç–≤—Ç—ç—Ä—Å—ç–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–¥—ç–¥ –ª –∑”©–≤—à”©”©—Ä–Ω”©

    # –ó”©–≤—Ö”©–Ω —Ç—É—Ö–∞–π–Ω —Ö—ç—Ä—ç–≥–ª—ç–≥—á–∏–π–Ω –æ—Ä–æ–ª—Ü–æ–æ –ª —Ö–∞—Ä–∞–≥–¥–∞–Ω–∞
    def get_queryset(self):
        return ChallengeAttempt.objects.filter(user=self.request.user)

    # POST —Ö–∏–π—Ö—ç–¥ user-–∏–π–≥ –∞–≤—Ç–æ–º–∞—Ç–∞–∞—Ä –æ–Ω–æ–æ–Ω–æ
    def perform_create(self, serializer):
        serializer.save(user=self.request.user)
